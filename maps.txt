Hashtables -> an unordered collection of key/value pairs in which all the keys are distinct, and the
values associated.

In Go, a map is a reference to a hash table.

A map type is written as : 

map[k]v

The built-in function "make" can be used to create a map:

ages := make(map[string]int) // mapping from strings to int

map literals may also be used to create a new map populated with key, value pairs.

ages := map[string] int{
    "alice": 31,
    "charlie": 34,
}

which is the same as:

ages["alice"] = 31
ages["charlie"] = 34

map elements are accessed through subscript notation.

A map lookup using a key that isn't present returns the zero value for its type.

A map element is not a variable, and we cannot take its address.

_ = &ages["bob"] //compile error -> cannot take address of map element.

One reason that we can't take the address of a map element is that growing a map might cause rehashing
of existing elements into new strange locations, thus potentially invalidating the address.

The order is random, varying from one execution to the next.

To enummerate the key/value pairs in order, we must sort the keys explicitly.
eg. Using the Strings function from the sort package of the keys are strings.

Common pattern:

import "sort"

var names []string

for name := range ages {
    names = append(names, name)
}

sort.Strings(names)

for _, name := range names {
    fmt.Printf("%s\t%d\n", name, ages[name])
}

Since we know the final size of names from the outset, it is more efficient to allocate an array
of the required size up front. The statement below creates a slice that is initially empty but has sufficient
capacity to store all the keys of the ages map.

names := make([]string, 0, len(ages))

One may need to distinguish between a non-existant element and an element that happens to have the
values zero:

if age, ok := ages["bob"]; !ok {/*...*/}

Subscripting a map in this context yields two values; the second is a boolean that reports whether
the element was present. The boolean variable is often called ok, especially if it is immediately used in
an if condition.
